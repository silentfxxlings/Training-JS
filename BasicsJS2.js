// let fieldTest1 = 2;
// let fieldTest2 = 4;


// let result = fieldTest1 ** fieldTest2; // ** - 1 число возводится в степень 2, % - остаток от деления , + - в число, ! - отицание, !! - в булин
// result += 1324;
// result -= 1324;
// result =  2;

// result++; // инкремент = result += 1; || result = result + 1; суфиксная форма инкремента произведет вычисление и запись после текущего действия
// result--; //декримент

// ++result; // префиксная форма инкремента произведет вычисление и запись передии текущего действия
// --result;

// let counter = 1;

// console.log(counter);
// console.log(counter++);


// https://github.com/iliakan/es5
// Приоритет операторов ПОРЯДОК
// 15	унарный плюс	+
// 15	унарный минус	-
// 14	возведение в степень	**
// 13	умножение	*
// 13	деление	/
// 12	сложение	+
// 12	вычитание	-
// …	…	…
// 2	присваивание	=
// …	…	…



/* ----------------------------
побитовые операторы работают с 32 разрядными числами, если будет необходимость, то будет перевод к ним (то есть смена типа), но произведет на уровне двоичного представления 

AND (и)     &
OR ()       |
NOT()       ~
XOR (Побитовое исключающее или)     ^
LSHIFT (L-LEFT сдвиг)      <<
RSHIFT (R-RIGHT сдвиг)      >>
ZERRO-FILL RSHIFT (R-RIGHT сдвиг с заполнением нулями) >>>

*/


// let a // (состояние) не инициализирована
// a = 2; // ининициализацияя - это процесс
// a = 3; // изменение
// a = undefined; //не инициализирована
// a = 6; // ининициализацияя



// let x = 1 + (a *= 2) ;


// console.log(a);
// console.log(x);


// let value = " \t \n" - 2;

// console.log(value);
// console.log(typeof value);
